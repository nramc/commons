# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Prepare Release

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'Release Version'
        default: '0.0.0'
        type: string

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v3

      - name: Set up Java & Maven
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: setup git properties for preparation
        run: |
          git config --global user.email "ramachandrannellai@gmail.com"
          git config --global user.name "Deploy Bot"
      - id: install-secret-key
        name: Install gpg secret key
        run: |
          # Install gpg secret key
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          # Verify gpg secret key
          gpg --list-secret-keys --keyid-format LONG

      - name: Prepare Release with specified version
        run: mvn --batch-mode --no-transfer-progress -DpushChanges=true release:prepare release:perform -DscmCommentPrefix='chore:' -DreleaseVersion=${{ inputs.releaseVersion }} -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}
        if: inputs.releaseVersion != '0.0.0' && inputs.releaseVersion != ''
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}

      - name: Prepare Release with default minor version increment
        run: mvn --batch-mode --no-transfer-progress -DpushChanges=true release:prepare release:perform -DscmCommentPrefix='chore:' -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}
        if: inputs.releaseVersion == '0.0.0' || inputs.releaseVersion == ''
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}

      - name: Get Released version
        run: |
          echo "RELEASE_VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))" >> "$GITHUB_ENV"
          echo "Released Version: $RELEASE_VERSION"

      - name: Create Release with Notes
        uses: ncipollo/release-action@v1
        with:
          tag: ${{env.RELEASE_VERSION}}
          name: ${{env.RELEASE_VERSION}}
          commit: main
          generateReleaseNotes: true
          draft: false
          prerelease: false
          token: ${{ secrets.DEPLOY_TOKEN }}

